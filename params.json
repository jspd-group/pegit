{
  "name": "Pegit",
  "tagline": "A Beep Version Control System",
  "body": " Pegit - Version Control System\r\n===============================================================================\r\n\r\n## Introduction\r\nThis project is inspired by [git](https://github.com/git/git).\r\n\r\n[Version control](https://en.wikipedia.org/wiki/Version_control) is a *system* that\r\nrecords changes to a file or set of files over time so that you can recall\r\nspecific versions later.\r\n\r\nA VCS allows you to:\r\n  + **revert** files back to a previous state,\r\n  + **revert** the entire project back to a previous state,\r\n  + **review** changes made over time,\r\n  + **check** who last modified source code that might be causing a problem.\r\n\r\nUsing a VCS also means that if someone lose files, they can generally be\r\nrecovered easily. In addition, you get all this for very little overhead.\r\n\r\n## Need and Requirement\r\nAs a part of their course plan/scheme students of computer science\r\nbranch are required to make coding projects may it be in any language C, C++,\r\nJava, Python, HTML and so on. What the usual practice is, they make files\r\nnamely(.c ,.h, .py, .html ...), or ReadMe files and various directories.\r\nThey make single source code file and make all the changes in it and save it.\r\nWhat happens in this practice is that they keep on losing the original code\r\nand data. After making many additions and after editing the source code so many\r\ntimes, say, one encounters a bug (a software bug is an error, flaw, failure or\r\nfault in a computer program or system that causes it to produce an incorrect or\r\nunexpected result, or to behave in unintended ways), it is very difficult to\r\ntrace the bug, meaning, it is very difficult to trace the part of the code which\r\nis responsible for the unexpected behavior.\r\n\r\n\r\n## Manual Solution\r\nPossible solution can be cloning the whole source code each time before making\r\neven a minute change. This takes too much of users time (as code becomes larger)\r\nand also has memory limitation. There is repetition of those files too in which\r\nno change was made.\r\n\r\n\r\n## Automated Solution (Version Control System)\r\nVersion control system is an automated system which keeps tracks of all the\r\nchanges in the repository of the project. System makes use of computer\r\nprocessing and uses database to know which files have been edited, deleted or\r\nnewly created. When changes are made, the system will ask the developer if they\r\nare to be committed(saved). Developer can give command to the system to save\r\nthem. Developer can retrieve any previous version of the project by accessing\r\nthe database. If developer makes a mistake, he can roll back to a previous\r\nversion. He can reproduce and understand a bug report on a past version of the\r\nproject's source code. He can also undo specific edits without losing all the\r\nwork that was done in the meanwhile. For any part of a file, he can determine\r\nwhen and why it was ever edited.\r\n\r\n## Prerequisites\r\nIf you are using `gcc` on Ubuntu, then you need to install zlib. You can find\r\nsource code for zlib from [here](http://github.com/madler/zlib). Download the\r\nsource code, compile it and install it. If you don't want to use zlib then you\r\ncan use `miniz` which is provided along with the source code of `pegit`.\r\n\r\nIf you are using Windows, the you'll need Mingw with zlib provided with it. If\r\nthere is no zlib in Mingw then build the `pegit` using miniz.\r\n\r\n## Building\r\n\r\nFollow these instructions:\r\n\r\n+ Download the source code using git as follow.\r\n```bash\r\n    $ git clone https://github.com/jspd-group/pegit.git\r\n```\r\n\r\n+ Move to the pegit directory.\r\n```bash\r\n    $ cd pegit\r\n```\r\n\r\n+ Use the `make` to build the source\r\n```bash\r\n$ make\r\n# or if you don't have zlib then execute the command as follows\r\n$ make NO_ZLIB=1\r\n# if you want to use gdb\r\n$ make debug # or make debug NO_ZLIB=1\r\n# there are also other options available which can be viewed using\r\n$ make help\r\n```\r\n\r\n+ Install the pegit using `make`\r\n```bash\r\n% make install # you need to be root before using this command\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}